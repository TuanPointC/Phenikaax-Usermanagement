@page "/profile"
@using global::UserManagement.UI.Services
@using global::UserManagement.Shared.Models.Dtos
@inject IAccountService AccountService

@if (_isLoading)
{
    <MudProgressCircular Style="position: absolute;top: 50%;left: 50%" Color="Color.Primary" Indeterminate="true"/>
}
else
{
    <div class="profile">
        <div class="banner"></div>
        <div class="avatar">
            <img src="/Images/phenikaa-icon.png" alt="">
        </div>
        <div class="info">
            <h1>@UserDto.UserName</h1>
            <div>
                @foreach (var element in RenderTagRole(UserDto.Roles))
                {
                    <MudChip Size="Size.Large" Variant="@element.Variant" Label="@element.Label" Color="@element.Color">@element.Text</MudChip>
                    <p class="des">@element.Class</p>
                }
            </div>
        </div>
    </div>
}

@code {
    private UserDto UserDto { get; set; } = new();
    [CascadingParameter]
    public Task<AuthenticationState>? AuthState { get; set; }
    private bool _isLoading = true;
    
    protected override async Task OnInitializedAsync()
    {
        UserDto = await AccountService.GetUserInformationAsync();
        _isLoading = false;
    }
    private class MudChip
    {
        public bool Label;
        public Color Color;
        public Variant Variant;
        public string? Text;
        public string? Class;
    }
    
    private IEnumerable<MudChip> RenderTagRole(string? roles)
    {
        if (string.IsNullOrEmpty(roles)) return Enumerable.Empty<MudChip>();
        var result = new List<MudChip>();
        var roleList = roles.Split(",");
        foreach (var role in roleList)
        {
            switch (role)
            {
                case "Distributor":
                    result.Add(new MudChip
                    {
                        Label = true,
                        Color = Color.Primary,
                        Variant = Variant.Text,
                        Text = "Distributor",
                        Class = "Quyền của nhà sản xuất (Phenikaa-X)"
                    });
                    break;
                case "Administrator":
                    result.Add(new MudChip
                    {
                        Label = true,
                        Color = Color.Info,
                        Variant = Variant.Text,
                        Text = "Administrator",
                        Class = "Quyền của nhà phân phối, người quản lý đơn vị vận hành robot, có kiến thức được training về robot"
                    });
                    break;
                case "User":
                    result.Add(new MudChip
                    {
                        Label = true,
                        Color = Color.Default,
                        Variant = Variant.Text,
                        Text = "User",
                        Class = "Quyền của người vận hành robot thường xuyên"
                    });
                    break;
            }
        }
        return result;
    }
}