@page "/EditUser/ForceChangePassword/{UserId}"
@using global::UserManagement.UI.Services
@using System.ComponentModel.DataAnnotations
@inject IAccountService AccountService
@inject ISnackbar Snackbar

<UserManagement.UI.Components.BackToPage Url="@($"/EditUser/{UserId}")" Title="Back to Edit User"/>
<div class="edit-user">
    <h2 class="title">Force Change Password</h2>
    <form class="form">
        <div class="input-group">
            <label for="userId">User Id</label>
            <input id="userId" value="@UserId" disabled/>
        </div>
        <div class="input-group">
            <label for="newpassword">New Password</label>
            <input id="newpassword" placeholder="New Password" @bind="@ChangePasswordData.NewPassword" type="password"/>
        </div>
        <div class="input-group">
            <label for="repassword">Confirm Password</label>
            <input id="repassword" placeholder="Confirm Password" @bind="@ChangePasswordData.NewPasswordConfirmation" type="password"/>
        </div>

        <ul class="messageError">
            @foreach (var message in MessageError??new())
            {
                <li>@message</li>
            }
        </ul>
        <div class="footer">
            <div class="action">
                <MudButton Variant="Variant.Filled" Class="btn-reset" OnClick="ResetField">Reset</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit">Save Changes</MudButton>
            </div>
        </div>

    </form>
</div>


@code {

    [Parameter]
    public string? UserId { get; set; } = "";
    
    
    private ForceChangePasswordModel ChangePasswordData { get; set; } = new();
    private List<string>? MessageError { get; set; } = new();
    

    protected override Task OnInitializedAsync()
    {
        if (UserId != null) 
            ChangePasswordData.UserId = new Guid(UserId);
        return Task.CompletedTask;
    }
    

    private void ResetField()
    {
        ChangePasswordData.NewPassword = "";
        ChangePasswordData.NewPasswordConfirmation = "";
        MessageError = new List<string>();
    }

    private async Task Submit()
    {
        var validationErrors = new List<ValidationResult>();
        MessageError = new List<string>();
        var isValid = Validator.TryValidateObject(ChangePasswordData, new ValidationContext(ChangePasswordData), validationErrors, validateAllProperties: true);
        foreach (var error in validationErrors.Where(error => error.ErrorMessage != null))
        {
            if (error.ErrorMessage != null) MessageError?.Add(error.ErrorMessage);
        }
        if (isValid)
        {
            var result = await AccountService.ForceChangePasswordAsync(ChangePasswordData);
            if (result)
            {
                Snackbar.Add("Change Password Successfully", Severity.Success);
            }
            else
            {
                Snackbar.Add("Change Password Unsuccessfully", Severity.Error);
            }
        }

    }

}